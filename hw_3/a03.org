#+title: A03

* Exercise 1
** Explain how the program is compiled and run.
Compilation is done with nvcc. Execution is done directly from the commandline.
#+begin_src
nvcc main.cu -o main
./main 1024
#+end_src

** For a vector length of N:
*** How many floating operations are being performed in your vector add kernel?
$N$
*** How many global memory reads are being performed by your kernel?
$2N$. $5N$ in the unlikely case that blockIdx/blockDim/threadIdx are also stored in global memory.

** For a vector length of 1024:
*** Explain how many CUDA threads and thread blocks you used.
I used 32 threads per block and $(1024 + 32 - 1) / 32 = 32$ blocks. This results in $1024$ threads in total.
*** Profile your program with Nvidia Nsight. What Achieved Occupancy did you get? You might find https://docs.nvidia.com/nsight-compute/NsightComputeCli/index.html#nvprof-metric-comparison
I could not get nsight to work on Google Colab. Running the nsight-cli directly fails due to a missing metric. Selecting for specifically achieved occupancy fails with a nondescript error.
#+begin_src
!nv-nsight-cu-cli main 1024

The input length is 1024
==PROF== Connected to process 524 (/content/main)
Copying to device in 52 mus
==PROF== Profiling "vecAdd" - 1: 0%....50%....100% - 1 pass

==ERROR== LaunchFailed
Adding in 446948 mus
Copying from device in 12 mus
==PROF== Disconnected from process 524
==ERROR== An error occurred while trying to profile.
[524] main@127.0.0.1
  vecAdd(double*, double*, double*, int), 2022-Dec-12 19:35:32, Context 1, Stream 7
    Section: GPU Speed Of Light
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                                                                (!) n/a
    SM Frequency                                                                                                  (!) n/a
    Elapsed Cycles                                                                                                (!) n/a
    Memory [%]                                                                                                    (!) n/a
    SOL DRAM                                                                                                      (!) n/a
    Duration                                                                                                      (!) n/a
    SOL L1/TEX Cache                                                                                              (!) n/a
    SOL L2 Cache                                                                                                  (!) n/a
    SM Active Cycles                                                                                              (!) n/a
    SM [%]                                                                                                        (!) n/a
    ---------------------------------------------------------------------- --------------- ------------------------------
    ERR   Rule Bottleneck returned an error: Metric launch__waves_per_multiprocessor not found
    ----- --------------------------------------------------------------------------------------------------------------
    ERR   <built-in function IAction_metric_by_name> returned a result with an error set
/root/Documents/NVIDIA Nsight
           Compute/2020.3.1/Sections/SpeedOfLight.py:45
/opt/nvidia/nsight-compute/2020.3.1/target/linux-desktop-glibc_2
          _11_3-x64/../../sections/NvRules.py:302

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                    (!) n/a
    Function Cache Configuration                                                                                  (!) n/a
    Grid Size                                                                                                     (!) n/a
    Registers Per Thread                                                                                          (!) n/a
    Shared Memory Configuration Size                                                                              (!) n/a
    Driver Shared Memory Per Block                                                                                (!) n/a
    Dynamic Shared Memory Per Block                                                                               (!) n/a
    Static Shared Memory Per Block                                                                                (!) n/a
    Threads                                                                                                       (!) n/a
    Waves Per SM                                                                                                  (!) n/a
    ---------------------------------------------------------------------- --------------- ------------------------------
    ERR   Rule Launch Configuration returned an error: Metric launch__block_size not found
    ----- --------------------------------------------------------------------------------------------------------------
    ERR   <built-in function IAction_metric_by_name> returned a result with an error set
/root/Documents/NVIDIA Nsight
           Compute/2020.3.1/Sections/LaunchStatistics.py:45
/opt/nvidia/nsight-compute/2020.3.1/target/linux-desktop-gli
          bc_2_11_3-x64/../../sections/NvRules.py:302

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                                                (!) n/a
    Block Limit Registers                                                                                         (!) n/a
    Block Limit Shared Mem                                                                                        (!) n/a
    Block Limit Warps                                                                                             (!) n/a
    Theoretical Active Warps per SM                                                                               (!) n/a
    Theoretical Occupancy                                                                                         (!) n/a
    Achieved Occupancy                                                                                            (!) n/a
    Achieved Active Warps Per SM                                                                                  (!) n/a
    ---------------------------------------------------------------------- --------------- ------------------------------
#+end_src

With only a specific metric:
#+begin_src
!nv-nsight-cu-cli --metrics sm__warps_active.avg.pct_of_peak_sustained_active main 1024

The input length is 1024
==PROF== Connected to process 572 (/content/main)
Copying to device in 49 mus
==PROF== Profiling "vecAdd" - 1: 0%....50%....100% - 1 pass

==ERROR== LaunchFailed
Adding in 364672 mus
Copying from device in 12 mus
==PROF== Disconnected from process 572
==ERROR== An error occurred while trying to profile.
[572] main@127.0.0.1
  vecAdd(double*, double*, double*, int), 2022-Dec-12 19:38:11, Context 1, Stream 7
    Section: Command line profiler metrics
    ---------------------------------------------------------------------- --------------- ------------------------------
    sm__warps_active.avg.pct_of_peak_sustained_active                                                             (!) n/a
    ---------------------------------------------------------------------- --------------- ------------------------------

#+end_src
** Now increase the vector length to 131070:
*** Did your program still work? If not, what changes did you make?
It worked.
*** Explain how many CUDA threads and thread blocks you used.
The same as above, i.e. 32 threads per block and $131070$ threads. The number of blocks is thus $(131070 + 32 - 1) / 32 = 4096$.
*** Profile your program with Nvidia Nsight. What Achieved Occupancy do you get now?
Still does not work.
** Further increase the vector length (try 6-10 different vector length), plot a stacked bar chart showing the breakdown of time including (1) data copy from host to device (2) the CUDA kernel (3) data copy from device to host. For this, you will need to add simple CPU timers to your code regions.
    | Input Length in Multiples of 131070 | To Device | Kernel | From Device |
    |-------------------------------------+-----------+--------+-------------|
    |                                   1 |      1027 | 157871 |           5 |
    |                                   2 |      1923 | 158321 |           5 |
    |                                   4 |      3807 | 157263 |           5 |
    |                                   8 |      7173 | 157361 |           4 |
    |                                  16 |     14262 | 155434 |           5 |
    |                                 128 |    115330 | 155241 |           5 |

    [[./ex_1/ex1.png]]

    The results seem unrealistic but as the time measurement seems correct to me and the result is correct, it is presumably correct due to optimizations in Cuda.


* Exercise 2
** Name three applications domains of matrix multiplication.
** How many floating operations are being performed in your matrix multiply kernel? 
** How many global memory reads are being performed by your kernel?
** For a matrix A of (128x128) and B of (128x128):
*** Explain how many CUDA threads and thread blocks you used. 
*** Profile your program with Nvidia Nsight. What Achieved Occupancy did you get? 
** For a matrix A of (511x1023) and B of (1023x4094):
*** Did your program still work? If not, what changes did you make?
*** Explain how many CUDA threads and thread blocks you used.
*** Profile your program with Nvidia Nsight. What Achieved Occupancy do you get now?
** Further increase the size of matrix A and B, plot a stacked bar chart showing the breakdown of time including (1) data copy from host to device (2) the CUDA kernel (3) data copy from device to host. For this, you will need to add simple CPU timers to your code regions. Explain what you observe.
** Now, change DataType from double to float, re-plot the a stacked bar chart showing the time breakdown. Explain what you observe. 
